import Head from "next/head";
import styles from "../styles/Home.module.css";
import socket from "../services/socketio";
import { useEffect, useState } from "react";

const STOP = 0;
const FORWARD = 3;
const BACKWARD = 4;
const LEFT = 1;
const RIGHT = 2;

export default function Home() {
  const [voiceListening, setVoiceListening] = useState(false);
  const [recButtonColor, setRecButtonColor] = useState("#f5f5f5");
  const [recTextColor, setRecTextColor] = useState("#f50000");
  useEffect(() => {
    socket.on("carrinho", (data) => {
      console.log(data);
    });
  }, []);
  useEffect(() => {}, voiceListening);
 
  function sendSocket(comando) {
    console.log(comando);
    socket.emit("comando", comando);
  }

  function sendInstanceClass(instanceClass) {
    console.log(instanceClass);
    socket.emit("setClass", instanceClass);
  }

  let intervalRef = null;

  function onMouseDown(direction_const) {
    intervalRef = setInterval(() => {
      sendSocket(direction_const);
    }, 50);
  }

  function onMouseUp(e) {
    if (intervalRef != null) {
      clearInterval(intervalRef);
      sendSocket(STOP);
    }
  }

  class SpeechApi {
    constructor() {
      this.running = false;

      if (typeof window == "undefined") {
        console.log("Window not defined");
        return;
      }

      const SpeechToText =
        window.SpeechRecognition || window.webkitSpeechRecognition;
      this.speechApi = new SpeechToText();
      this.speechApi.continuous = true;
      this.speechApi.lang = "pt-BR";
      this.speechApi.onresult = (e) => {
        const resultIndex = e.resultIndex;
        const msg = treatVoiceMessage(e.results[resultIndex][0].transcript);
        setTargetObject(msg);
        sendInstanceClass(msg);
      };
    }

    start() {
      this.speechApi.start();
      this.running = true;
      setVoiceListening(true);
      setRecButtonColor("#f50000");
      setRecTextColor("#f5f5f5");
    }

    stop() {
      this.speechApi.stop();
      this.running = false;
      setVoiceListening(false);
      setRecButtonColor("#f5f5f5");
      setRecTextColor("#f50000");
    }

    toggle() {
      if (this.running) {
        this.stop();
      } else {
        this.start();
      }
    }
  }
  const speechApi = new SpeechApi();

  function treatVoiceMessage(msg) {
    if (msg.includes("direita") || msg.includes("right")) {
      return "right";
    } else if (msg.includes("esquerda") || msg.includes("left")) {
      return "left";
    } else if (msg.includes("pessoa") || msg.includes("person")) {
      return "person";
    } else if (
      msg.includes("xícara") ||
      msg.includes("copo") ||
      msg.includes("cup") ||
      msg.includes("glass")
    ) {
      return "cup";
    }

    return "error";
  }

  function setTargetObject(msg) {
    const iframe = document.getElementById("espapp");

    if (iframe) {
      iframe.contentWindow.postMessage(msg, "*");
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>PIC2 2023/1 - Ufes</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.camControl}>
        {/* <iframe src="http://localhost:8080" id="espapp"></iframe> */}
        <iframe src="http://10.0.0.110:80/" id="espapp"></iframe>
      </div>
      <div className={styles.voiceButton}>
        <button
          style={{
            background: recButtonColor,
            color: recTextColor,
          }}
          onClick={() => speechApi.toggle()}
        >
          <b>Falar</b>
        </button>
      </div>

      <div className={styles.carControl}>
        <div className={styles.upperButton}>
          <button
            onMouseDown={() => onMouseDown(FORWARD)}
            onMouseUp={onMouseUp}
          >
            FRENTE
          </button>
        </div>

        <div className={styles.middleButton}>
          <button
            onMouseDown={() => onMouseDown(LEFT)}
            onMouseUp={onMouseUp}
            onTouchStart={() => onMouseDown(LEFT)}
            onTouchEnd={onMouseUp}
          >
            ESQUERDA
          </button>
          <button
            onMouseDown={() => onMouseDown(RIGHT)}
            onMouseUp={onMouseUp}
          >
            DIREITA
          </button>
        </div>

        <div className={styles.lowerButton}>
          <button
            onMouseDown={() => onMouseDown(BACKWARD)}
            onMouseUp={onMouseUp}
          >
            TRÁS
          </button>
        </div>
      </div>
      <div className={styles.stop}>
        <button onClick={() => sendSocket(STOP)}>Para</button>
      </div>
    </div>
  );
}
