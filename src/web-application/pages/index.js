import Head from "next/head";
import styles from "../styles/Home.module.css";
import socket from "../services/socketio";
import { useEffect, useState } from "react";
import { Joystick } from "react-joystick-component";
export default function Home() {
  const [voiceListening, setVoiceListening] = useState(false);
  const [recButtonColor, setRecButtonColor] = useState("#f5f5f5");
  const [recTextColor, setRecTextColor] = useState("#f50000")
  useEffect(() => {
    socket.on("carrinho", (data) => {
      console.log(data);
    });
  }, []);
  useEffect(() => {
  }, voiceListening);



  function sendSocket(comando) {
    console.log(comando);
    socket.emit("comando", comando);
  }

  let intervalRef = null;

  function onMouseDown(p1, p2) {
    intervalRef = setInterval(() => {
      // console.log(e.type);
      sendSocket([p1, p2]);
    }, 50);
  }

  function onMouseUp(e) {
    if (intervalRef != null) {
      clearInterval(intervalRef);
      sendSocket(["P", "P"]);
    }
  }

  let sentidoAtual = "";
  function handleMove(e) {
    // if (!e) return;
    if (sentidoAtual == e.direction) return;
    if (e.direction == "RIGHT") {
      sendSocket(["F", "P"]);
    }
    if (e.direction == "LEFT") {
      sendSocket(["P", "F"]);
    }
    if (e.direction == "FORWARD") {
      sendSocket(["F", "F"]);
    }
    if (e.direction == "BACKWARD") {
      sendSocket(["T", "T"]);
    }
    sentidoAtual = e.direction;
  }

  function handleStop(e) {
    sendSocket(["P", "P"]);
    sentidoAtual = "P";
  }

  class SpeechApi {
    constructor() {
      this.running = false;

      if (typeof window == "undefined") {
        console.log("Window not defined");
        return;
      }

      const SpeechToText = window.SpeechRecognition || window.webkitSpeechRecognition;
      this.speechApi = new SpeechToText();
      this.speechApi.continuous = true;
      this.speechApi.lang = "pt-BR";
      this.speechApi.onresult = (e) => {
        const resultIndex = e.resultIndex;
        const msg = treatVoiceMessage(e.results[resultIndex][0].transcript);
        setTargetObject(msg);
      };
    }

    start() {
      this.speechApi.start();
      this.running = true;
      setVoiceListening(true);
      setRecButtonColor("#f50000");
      setRecTextColor("#f5f5f5");
    }
    
    stop() {
      this.speechApi.stop();
      this.running = false;
      setVoiceListening(false);
      setRecButtonColor("#f5f5f5");
      setRecTextColor("#f50000");
    }
    
    toggle() {
      if (this.running) {
        this.stop();
      } else {
        this.start();
      }
    }
  }
  const speechApi = new SpeechApi();


  
  function treatVoiceMessage(msg) {
    
    if (msg.includes("direita") || msg.includes("right")) {
      return "right";      
    }

    else if (msg.includes("esquerda") || msg.includes("left")) {
      return "left";
    }

    else if (msg.includes("pessoa") || msg.includes("person")) {
      return "person";
    }

    else if (msg.includes("xícara") || msg.includes("copo") || msg.includes("cup") || msg.includes("glass")) {
      return "cup";
    }

    return "error";
  }

  function setTargetObject(msg) {
    const iframe = document.getElementById("espapp");
    
    if (iframe) {
      iframe.contentWindow.postMessage(msg, '*');
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>PIC2 2023/1 - Ufes</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.camControl}>
        <iframe src="http://localhost:8080" id="espapp"></iframe>
        {/* <iframe src="http://10.0.0.107/" id="espapp"></iframe> */}
      </div>
      <Joystick
        size={100}
        sticky={true}
        baseColor="rgb(245, 245, 245)"
        stickColor="rgb(128, 128, 128)"
        move={handleMove}
        stop={handleStop}
      ></Joystick>
      <div className={styles.voiceButton}>
        <button style={{background:recButtonColor, color:recTextColor}} onClick={() => speechApi.toggle()}><b>Falar</b></button>
      </div>

      <div className={styles.carControl}>
        <div className={styles.upperButton}>
          <button
            onMouseDown={() => onMouseDown("F", "F")}
            onMouseUp={onMouseUp}
          >
            FRENTE
          </button>
        </div>

        <div className={styles.middleButton}>
          <button
            onMouseDown={() => onMouseDown("P", "F")}
            onMouseUp={onMouseUp}
            onTouchStart={() => onMouseDown("P", "F")}
            onTouchEnd={onMouseUp}
          >
            ESQUERDA
          </button>
          <button
            onMouseDown={() => onMouseDown("F", "P")}
            onMouseUp={onMouseUp}
          >
            DIREITA
          </button>
        </div>

        <div className={styles.lowerButton}>
          <button
            onMouseDown={() => onMouseDown("T", "T")}
            onMouseUp={onMouseUp}
          >
            TRÁS
          </button>
        </div>
      </div>
      <div className={styles.stop}>
        <button onClick={() => sendSocket(["P", "P"])}>Para</button>
      </div>
    </div>
  );
}
